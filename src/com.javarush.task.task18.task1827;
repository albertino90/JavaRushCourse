package com.javarush.task.task18.task1827;
import java.io.*;
import java.util.ArrayList;
/*Прайсы
CrUD для таблицы внутри файла.
Считать с консоли имя файла для операций CrUD.

Программа запускается со следующим набором параметров:
-c productName price quantity

Значения параметров:
где id - 8 символов.
productName - название товара, 30 символов.
price - цена, 8 символов.
quantity - количество, 4 символа.
-c - добавляет товар с заданными параметрами в конец файла, генерирует id самостоятельно, инкрементируя максимальный id, найденный в файле.

В файле данные хранятся в следующей последовательности (без разделяющих пробелов):
id productName price quantity

Данные дополнены пробелами до их длины.

Пример:
19846   Шорты пляжные синие           159.00  12
198478  Шорты пляжные черные с рисунко173.00  17
19847983Куртка для сноубордистов, разм10173.991234


Требования:
1. Программа должна считать имя файла для операций CrUD с консоли.
2. В классе Solution не должны быть использованы статические переменные.
3. При запуске программы без параметров список товаров должен остаться неизменным.
4. При запуске программы с параметрами "-c productName price quantity" в конец файла должна добавится новая строка с товаром.
5. Товар должен иметь следующий id, после максимального, найденного в файле.
6. Форматирование новой строки товара должно четко совпадать с указанным в задании.
7. Созданные для файлов потоки должны быть закрыты.*/

public class Solution {
    public static void main(String[] args) throws Exception {
        if(args.length==0){
            System.out.println("хуй");
        }else if(args[0].equals("-c")){
            BufferedReader reader1 = new BufferedReader(new InputStreamReader(System.in));
            String name = reader1.readLine();
            reader1.close();
            ArrayList<String>list = new ArrayList<>();
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(
                            new FileInputStream(name),"CP1251"))){
                String line;
                while ((line = reader.readLine()) != null) {
                    list.add(line);
                }
                reader.close();
            } catch (IOException e) {
                // log error
            }
            int max = 0;
            for(String e : list){
                System.out.println(e);
            }
            for (int i = 0; i < list.size(); i++) {
                int ma = Integer.parseInt(list.get(i).substring(0,8).trim());
                if(ma>max){
                    max=ma;
                }
            }
            String text = formatString(String.valueOf(max+1),8);
            String one = formatString(args[1],30);
            String two = formatString(args[2],8);
            String tr = formatString(args[3],4);
            StringBuffer sb = new StringBuffer(formatString(text,8));
            sb.append(one.substring(0,30));
            sb.append(two.substring(0,8));
            sb.append(tr.substring(0,4));
            list.add(sb.toString());
            System.out.println(max);
            PrintWriter pw = new PrintWriter(new FileOutputStream(name));
            for (String club : list)
                pw.println(club);
            pw.close();
        }
    }
    public static String formatString(String str, int position) {
        final StringBuffer buffer = new StringBuffer();
        final int to = position - str.length();
        buffer.append(str);
        for (int i = 0; i < to; i++) {
            buffer.append(" ");
        }
        return buffer.toString();
    }
}
